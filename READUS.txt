        code/
        ‚îÇ‚îÄ‚îÄ app/
        ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îú‚îÄ‚îÄ main.py            # file ch·∫°y app
        ‚îÇ   ‚îú‚îÄ‚îÄ core/              # config, k·∫øt n·ªëi DB
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ database.py
        ‚îÇ   ‚îú‚îÄ‚îÄ models/            # ORM models
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ user.py
        ‚îÇ   ‚îú‚îÄ‚îÄ repositories/      # thao t√°c DB (CRUD)
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ user_repository.py
        ‚îÇ   ‚îú‚îÄ‚îÄ services/          # logic nghi·ªáp v·ª•
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth_service.py
        ‚îÇ   ‚îú‚îÄ‚îÄ routers/           # route FastAPI
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth_router.py
        ‚îÇ   ‚îî‚îÄ‚îÄ templates/         # Jinja2 templates (FE)
        ‚îÇ   |    ‚îú‚îÄ‚îÄ login.html
        ‚îÇ   |    ‚îî‚îÄ‚îÄ home.html
        ‚îÇ   ‚îî‚îÄ‚îÄ static/              # ch·ª©a file tƒ©nh
        ‚îÇ       ‚îú‚îÄ‚îÄ images/
        ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ logo.png
        ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ banner.jpg
        ‚îÇ       ‚îî‚îÄ‚îÄ icons/
        ‚îÇ           ‚îî‚îÄ‚îÄ favicon.ico
        ‚îú‚îÄ‚îÄ requirements.txt
        ‚îî‚îÄ‚îÄ alembic/               # (t√πy ch·ªçn) migration DB
pip install -r requirements.txt



[Browser] -- nh·∫≠p /login --> [FastAPI Router] -- render login.html
[Browser nh·∫≠p form] -- POST /login --> [FastAPI Router] 
        --> [Auth Service] --> [User Repository] --> [DB MySQL] 
        --> n·∫øu ƒë√∫ng user => Redirect /home 
        --> n·∫øu sai => render l·∫°i login.html v·ªõi error
ch·∫°y file
 uvicorn app.main:app --reload


router ch·ªãu tr√°ch nhi·ªám nh·∫≠n request / tr·∫£ response. (servlet)

service x·ª≠ l√Ω logic. (controller)

repository l√†m vi·ªác v·ªõi DB. (DAO)

c√°ch chuy·ªÉn file 20s sang file c√≥ th·ªÉ xem ƒëc tr√™n web
M·ªü th∆∞ m·ª•c ch·ª©a video (Shift + Chu·ªôt ph·∫£i ‚Üí Open PowerShell window here), r·ªìi ch·∫°y:
# T·∫°o th∆∞ m·ª•c m·ªõi t√™n l√† converted (n·∫øu ch∆∞a c√≥)
$newFolder = "converted"
if (!(Test-Path $newFolder)) {
    New-Item -ItemType Directory -Path $newFolder | Out-Null
}

# Duy·ªát qua to√†n b·ªô file .mp4 v√† convert sang th∆∞ m·ª•c m·ªõi
foreach ($file in Get-ChildItem *.mp4) {
    $name = [System.IO.Path]::GetFileNameWithoutExtension($file)
    $outPath = Join-Path $newFolder "$name`_h264.mp4"
    ffmpeg -i $file.FullName -c:v libx264 -crf 23 -preset fast -movflags +faststart $outPath
}

ch·∫°y c√°c file train
python continue_train_image.py --model_path "models/image/20251025_152553_Xception/model_final.h5" --n_samples 100 --sampling_mode newest --train_ratio 0.8 --depth normal
python train_image.py --dataset_root "dataset/image" --n_samples 500 --sampling_mode "random" --depth "normal" --out_root "models/image" --train_ratio 0.8
ch·∫°y video v·ªõi b·∫Øt bu·ªôc c·∫Øt l·∫°i frame
python train_video.py --dataset_root dataset/video --n_samples 1000 --sampling_mode newest --depth deep --out_root "models/video" --train_ratio 0.75 --pooling_strategy median --force_extract
üìä T√≠nh nƒÉng m·ªõi ƒë∆∞·ª£c th√™m:
‚úÖ Gi·ªØ l·∫°i frames: T·ª± ƒë·ªông ph√°t hi·ªán v√† s·ª≠ d·ª•ng frames ƒë√£ extract tr∆∞·ªõc ƒë√≥

‚úÖ Video-level evaluation: ƒê√°nh gi√° ·ªü c·∫£ m·ª©c frame v√† video

‚úÖ Multiple pooling strategies: 5 ph∆∞∆°ng ph√°p pooling kh√°c nhau

‚úÖ Visualization: Bi·ªÉu ƒë·ªì predictions cho t·ª´ng video

‚úÖ Comprehensive metrics: Metrics ƒë·∫ßy ƒë·ªß cho c·∫£ frame v√† video level

‚úÖ Flexible CLI: Nhi·ªÅu t√πy ch·ªçn command line
python continue_train_video.py --model_path "models/video/20241215_143045_Xception_video/model_final.h5" --n_samples 500 --sampling_mode random --depth normal --train_ratio 0.8
python continue_train_video.py --model_path models/video/20241201_143000_Xception_video/model_final.h5 --n_samples 500 --sampling_mode random --depth deep --train_ratio 0.8 --force_extract --pooling_strategy max